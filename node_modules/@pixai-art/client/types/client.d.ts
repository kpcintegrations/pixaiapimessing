import type { GraphQLFormattedError } from 'graphql';
import { Observable } from 'rxjs';
import { type MediaBaseFragment, MediaType, type Requester, type SubscribePersonalEventsSubscription, type TaskBaseFragment, type UploadMediaInput, type UploadMediaMutation } from './generated/graphql';
import type { TaskParameters } from './parameters.types';
import type { GenerateImageOptions } from './type';
import { type RestartableClient } from './websocket';
export interface PixAIClientOptions {
    apiKey: string;
    fetch?: (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>;
    apiBaseUrl?: string;
    webSocketBaseUrl?: string;
    webSocketImpl?: unknown;
}
export interface PixAIGraphqlRequestOptions {
}
export type PixAIClientRequester = Requester<PixAIGraphqlRequestOptions>;
export declare class PixAIApiError extends Error {
    errors?: ReadonlyArray<GraphQLFormattedError>;
    status?: number;
    response?: Response;
}
export declare const isEvent: (e: unknown) => e is Event;
export declare const isCloseEvent: (e: unknown) => e is CloseEvent;
export declare const isErrorEvent: (e: unknown) => e is ErrorEvent;
export declare class PixAIClient {
    opt: PixAIClientOptions;
    constructor(opt: PixAIClientOptions);
    userAgent: string;
    get apiBaseUrl(): string;
    get webSocketBaseUrl(): string;
    get fetch(): (input: RequestInfo | URL, init?: RequestInit | undefined) => Promise<Response>;
    protected graphqlWsClients: Set<RestartableClient>;
    protected subscriptionRequest: PixAIClientRequester;
    protected normalRequest: PixAIClientRequester;
    sendRawRequest: PixAIClientRequester;
    rawSdk: {
        createGenerationTask(variables: import("./generated/graphql").Exact<{
            parameters: any;
        }>, options?: PixAIGraphqlRequestOptions | undefined): Promise<import("./generated/graphql").CreateGenerationTaskMutation>;
        cancelGenerationTask(variables: import("./generated/graphql").Exact<{
            id: string;
        }>, options?: PixAIGraphqlRequestOptions | undefined): Promise<import("./generated/graphql").CancelGenerationTaskMutation>;
        uploadMedia(variables: import("./generated/graphql").Exact<{
            input: UploadMediaInput;
        }>, options?: PixAIGraphqlRequestOptions | undefined): Promise<UploadMediaMutation>;
        getTaskById(variables: import("./generated/graphql").Exact<{
            id: string;
        }>, options?: PixAIGraphqlRequestOptions | undefined): Promise<import("./generated/graphql").GetTaskByIdQuery>;
        getMediaById(variables: import("./generated/graphql").Exact<{
            id: string;
        }>, options?: PixAIGraphqlRequestOptions | undefined): Promise<import("./generated/graphql").GetMediaByIdQuery>;
        subscribePersonalEvents(variables?: import("./generated/graphql").Exact<{
            [key: string]: never;
        }> | undefined, options?: PixAIGraphqlRequestOptions | undefined): Observable<SubscribePersonalEventsSubscription>;
    };
    protected _$personalEvents?: Observable<SubscribePersonalEventsSubscription>;
    get $personalEvents(): Observable<SubscribePersonalEventsSubscription>;
    close(): void;
    createGenerationTask(parameters: TaskParameters): Promise<{
        __typename?: "Task" | undefined;
        id: string;
        userId: string;
        parameters?: any;
        outputs?: any;
        status?: string | undefined;
        startedAt?: any;
        endAt?: any;
        createdAt: any;
        updatedAt: any;
    } | undefined>;
    cancelGenerationTask(id: string): Promise<{
        __typename?: "Task" | undefined;
        id: string;
        userId: string;
        parameters?: any;
        outputs?: any;
        status?: string | undefined;
        startedAt?: any;
        endAt?: any;
        createdAt: any;
        updatedAt: any;
    } | undefined>;
    getTaskById(id: string): Promise<{
        __typename?: "Task" | undefined;
        id: string;
        userId: string;
        parameters?: any;
        outputs?: any;
        status?: string | undefined;
        startedAt?: any;
        endAt?: any;
        createdAt: any;
        updatedAt: any;
    } | undefined>;
    generateImage(parameters: TaskParameters, options?: GenerateImageOptions): Promise<{
        __typename?: "Task" | undefined;
        id: string;
        userId: string;
        parameters?: any;
        outputs?: any;
        status?: string | undefined;
        startedAt?: any;
        endAt?: any;
        createdAt: any;
        updatedAt: any;
    }>;
    private getUploadUrl;
    private registerMedia;
    protected uploadMediaFile(file: File): Promise<{
        __typename?: "UploadMediaRes" | undefined;
        uploadUrl?: string | undefined;
        externalId?: string | undefined;
        mediaId?: string | undefined;
        media?: {
            __typename?: "Media" | undefined;
            id: string;
            type: MediaType;
            width?: number | undefined;
            height?: number | undefined;
            imageType?: string | undefined;
            urls?: {
                __typename?: "ImageUrl" | undefined;
                variant?: import("./generated/graphql").ImageVariant | undefined;
                url?: string | undefined;
            }[] | undefined;
        } | undefined;
    }>;
    protected uploadMediaUrl(url: string): Promise<{
        __typename?: "UploadMediaRes" | undefined;
        uploadUrl?: string | undefined;
        externalId?: string | undefined;
        mediaId?: string | undefined;
        media?: {
            __typename?: "Media" | undefined;
            id: string;
            type: MediaType;
            width?: number | undefined;
            height?: number | undefined;
            imageType?: string | undefined;
            urls?: {
                __typename?: "ImageUrl" | undefined;
                variant?: import("./generated/graphql").ImageVariant | undefined;
                url?: string | undefined;
            }[] | undefined;
        } | undefined;
    }>;
    uploadMedia(input: UploadMediaInput | File | string): Promise<UploadMediaMutation['uploadMedia']>;
    getMediaById(id: string): Promise<{
        __typename?: "Media" | undefined;
        id: string;
        type: MediaType;
        width?: number | undefined;
        height?: number | undefined;
        imageType?: string | undefined;
        urls?: {
            __typename?: "ImageUrl" | undefined;
            variant?: import("./generated/graphql").ImageVariant | undefined;
            url?: string | undefined;
        }[] | undefined;
    } | undefined>;
    getPublicUrl(media: MediaBaseFragment): string | undefined;
    downloadMedia(media: MediaBaseFragment): Promise<ArrayBuffer>;
    getMediaFromTask(task: TaskBaseFragment): Promise<any[] | {
        __typename?: "Media" | undefined;
        id: string;
        type: MediaType;
        width?: number | undefined;
        height?: number | undefined;
        imageType?: string | undefined;
        urls?: {
            __typename?: "ImageUrl" | undefined;
            variant?: import("./generated/graphql").ImageVariant | undefined;
            url?: string | undefined;
        }[] | undefined;
    } | undefined>;
}
