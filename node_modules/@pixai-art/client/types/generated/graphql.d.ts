import { Observable } from 'rxjs';
export type Maybe<T> = T | undefined;
export type InputMaybe<T> = T | undefined | null;
export type Exact<T extends {
    [key: string]: unknown;
}> = {
    [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
    [SubKey in K]: Maybe<T[SubKey]>;
};
export type MakeEmpty<T extends {
    [key: string]: unknown;
}, K extends keyof T> = {
    [_ in K]?: never;
};
export type Incremental<T> = T | {
    [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never;
};
export type Scalars = {
    ID: {
        input: string;
        output: string;
    };
    String: {
        input: string;
        output: string;
    };
    Boolean: {
        input: boolean;
        output: boolean;
    };
    Int: {
        input: number;
        output: number;
    };
    Float: {
        input: number;
        output: number;
    };
    Date: {
        input: any;
        output: any;
    };
    JSON: {
        input: any;
        output: any;
    };
    JSONObject: {
        input: any;
        output: any;
    };
    Void: {
        input: any;
        output: any;
    };
};
export declare enum ImageVariant {
    Public = "PUBLIC",
    StillThumbnail = "STILL_THUMBNAIL",
    Thumbnail = "THUMBNAIL"
}
export declare enum MediaProvider {
    Cf = "CF",
    S3 = "S3"
}
export declare enum MediaType {
    Image = "IMAGE",
    Video = "VIDEO"
}
export type UploadMediaInput = {
    externalId?: InputMaybe<Scalars['String']['input']>;
    height?: InputMaybe<Scalars['Int']['input']>;
    imageType?: InputMaybe<Scalars['String']['input']>;
    isPrivate?: InputMaybe<Scalars['Boolean']['input']>;
    provider?: InputMaybe<MediaProvider>;
    type: MediaType;
    width?: InputMaybe<Scalars['Int']['input']>;
};
export type MediaBaseFragment = {
    __typename?: 'Media';
    id: string;
    type: MediaType;
    width?: number | undefined;
    height?: number | undefined;
    imageType?: string | undefined;
    urls?: Array<{
        __typename?: 'ImageUrl';
        variant?: ImageVariant | undefined;
        url?: string | undefined;
    }> | undefined;
};
export type TaskBaseFragment = {
    __typename?: 'Task';
    id: string;
    userId: string;
    parameters?: any | undefined;
    outputs?: any | undefined;
    status?: string | undefined;
    startedAt?: any | undefined;
    endAt?: any | undefined;
    createdAt: any;
    updatedAt: any;
};
export type CreateGenerationTaskMutationVariables = Exact<{
    parameters: Scalars['JSONObject']['input'];
}>;
export type CreateGenerationTaskMutation = {
    __typename?: 'Mutation';
    createGenerationTask?: {
        __typename?: 'Task';
        id: string;
        userId: string;
        parameters?: any | undefined;
        outputs?: any | undefined;
        status?: string | undefined;
        startedAt?: any | undefined;
        endAt?: any | undefined;
        createdAt: any;
        updatedAt: any;
    } | undefined;
};
export type CancelGenerationTaskMutationVariables = Exact<{
    id: Scalars['ID']['input'];
}>;
export type CancelGenerationTaskMutation = {
    __typename?: 'Mutation';
    cancelGenerationTask?: {
        __typename?: 'Task';
        id: string;
        userId: string;
        parameters?: any | undefined;
        outputs?: any | undefined;
        status?: string | undefined;
        startedAt?: any | undefined;
        endAt?: any | undefined;
        createdAt: any;
        updatedAt: any;
    } | undefined;
};
export type UploadMediaMutationVariables = Exact<{
    input: UploadMediaInput;
}>;
export type UploadMediaMutation = {
    __typename?: 'Mutation';
    uploadMedia: {
        __typename?: 'UploadMediaRes';
        uploadUrl?: string | undefined;
        externalId?: string | undefined;
        mediaId?: string | undefined;
        media?: {
            __typename?: 'Media';
            id: string;
            type: MediaType;
            width?: number | undefined;
            height?: number | undefined;
            imageType?: string | undefined;
            urls?: Array<{
                __typename?: 'ImageUrl';
                variant?: ImageVariant | undefined;
                url?: string | undefined;
            }> | undefined;
        } | undefined;
    };
};
export type GetTaskByIdQueryVariables = Exact<{
    id: Scalars['ID']['input'];
}>;
export type GetTaskByIdQuery = {
    __typename?: 'Query';
    task?: {
        __typename?: 'Task';
        id: string;
        userId: string;
        parameters?: any | undefined;
        outputs?: any | undefined;
        status?: string | undefined;
        startedAt?: any | undefined;
        endAt?: any | undefined;
        createdAt: any;
        updatedAt: any;
    } | undefined;
};
export type GetMediaByIdQueryVariables = Exact<{
    id: Scalars['String']['input'];
}>;
export type GetMediaByIdQuery = {
    __typename?: 'Query';
    media?: {
        __typename?: 'Media';
        id: string;
        type: MediaType;
        width?: number | undefined;
        height?: number | undefined;
        imageType?: string | undefined;
        urls?: Array<{
            __typename?: 'ImageUrl';
            variant?: ImageVariant | undefined;
            url?: string | undefined;
        }> | undefined;
    } | undefined;
};
export type AllEventsFragment = {
    __typename?: 'Events';
    taskUpdated?: {
        __typename?: 'Task';
        id: string;
        userId: string;
        parameters?: any | undefined;
        outputs?: any | undefined;
        status?: string | undefined;
        startedAt?: any | undefined;
        endAt?: any | undefined;
        createdAt: any;
        updatedAt: any;
    } | undefined;
};
export type SubscribePersonalEventsSubscriptionVariables = Exact<{
    [key: string]: never;
}>;
export type SubscribePersonalEventsSubscription = {
    __typename?: 'Subscription';
    personalEvents?: {
        __typename?: 'Events';
        taskUpdated?: {
            __typename?: 'Task';
            id: string;
            userId: string;
            parameters?: any | undefined;
            outputs?: any | undefined;
            status?: string | undefined;
            startedAt?: any | undefined;
            endAt?: any | undefined;
            createdAt: any;
            updatedAt: any;
        } | undefined;
    } | undefined;
};
export declare const MediaBaseFragmentDoc = "\n    fragment MediaBase on Media {\n  id\n  type\n  width\n  height\n  urls {\n    variant\n    url\n  }\n  imageType\n}\n    ";
export declare const TaskBaseFragmentDoc = "\n    fragment TaskBase on Task {\n  id\n  userId\n  parameters\n  outputs\n  status\n  startedAt\n  endAt\n  createdAt\n  updatedAt\n}\n    ";
export declare const AllEventsFragmentDoc = "\n    fragment AllEvents on Events {\n  taskUpdated {\n    ...TaskBase\n  }\n}\n    ";
export declare const CreateGenerationTaskDocument = "\n    mutation createGenerationTask($parameters: JSONObject!) {\n  createGenerationTask(parameters: $parameters) {\n    ...TaskBase\n  }\n}\n    \n    fragment TaskBase on Task {\n  id\n  userId\n  parameters\n  outputs\n  status\n  startedAt\n  endAt\n  createdAt\n  updatedAt\n}\n    ";
export declare const CancelGenerationTaskDocument = "\n    mutation cancelGenerationTask($id: ID!) {\n  cancelGenerationTask(id: $id) {\n    ...TaskBase\n  }\n}\n    \n    fragment TaskBase on Task {\n  id\n  userId\n  parameters\n  outputs\n  status\n  startedAt\n  endAt\n  createdAt\n  updatedAt\n}\n    ";
export declare const UploadMediaDocument = "\n    mutation uploadMedia($input: UploadMediaInput!) {\n  uploadMedia(input: $input) {\n    uploadUrl\n    externalId\n    mediaId\n    media {\n      ...MediaBase\n    }\n  }\n}\n    \n    fragment MediaBase on Media {\n  id\n  type\n  width\n  height\n  urls {\n    variant\n    url\n  }\n  imageType\n}\n    ";
export declare const GetTaskByIdDocument = "\n    query getTaskById($id: ID!) {\n  task(id: $id) {\n    ...TaskBase\n  }\n}\n    \n    fragment TaskBase on Task {\n  id\n  userId\n  parameters\n  outputs\n  status\n  startedAt\n  endAt\n  createdAt\n  updatedAt\n}\n    ";
export declare const GetMediaByIdDocument = "\n    query getMediaById($id: String!) {\n  media(id: $id) {\n    ...MediaBase\n  }\n}\n    \n    fragment MediaBase on Media {\n  id\n  type\n  width\n  height\n  urls {\n    variant\n    url\n  }\n  imageType\n}\n    ";
export declare const SubscribePersonalEventsDocument = "\n    subscription subscribePersonalEvents {\n  personalEvents {\n    ...AllEvents\n  }\n}\n    \n    fragment AllEvents on Events {\n  taskUpdated {\n    ...TaskBase\n  }\n}\n    \n\n    fragment TaskBase on Task {\n  id\n  userId\n  parameters\n  outputs\n  status\n  startedAt\n  endAt\n  createdAt\n  updatedAt\n}\n    ";
export type Requester<C = {}> = <R, V>(doc: string, vars?: V, options?: C) => Promise<R> | Observable<R>;
export declare function getSdk<C>(requester: Requester<C>): {
    createGenerationTask(variables: CreateGenerationTaskMutationVariables, options?: C): Promise<CreateGenerationTaskMutation>;
    cancelGenerationTask(variables: CancelGenerationTaskMutationVariables, options?: C): Promise<CancelGenerationTaskMutation>;
    uploadMedia(variables: UploadMediaMutationVariables, options?: C): Promise<UploadMediaMutation>;
    getTaskById(variables: GetTaskByIdQueryVariables, options?: C): Promise<GetTaskByIdQuery>;
    getMediaById(variables: GetMediaByIdQueryVariables, options?: C): Promise<GetMediaByIdQuery>;
    subscribePersonalEvents(variables?: SubscribePersonalEventsSubscriptionVariables, options?: C): Observable<SubscribePersonalEventsSubscription>;
};
export type Sdk = ReturnType<typeof getSdk>;
