export var ImageVariant;
(function (ImageVariant) {
    ImageVariant["Public"] = "PUBLIC";
    ImageVariant["StillThumbnail"] = "STILL_THUMBNAIL";
    ImageVariant["Thumbnail"] = "THUMBNAIL";
})(ImageVariant || (ImageVariant = {}));
export var MediaProvider;
(function (MediaProvider) {
    MediaProvider["Cf"] = "CF";
    MediaProvider["S3"] = "S3";
})(MediaProvider || (MediaProvider = {}));
export var MediaType;
(function (MediaType) {
    MediaType["Image"] = "IMAGE";
    MediaType["Video"] = "VIDEO";
})(MediaType || (MediaType = {}));
export const MediaBaseFragmentDoc = `
    fragment MediaBase on Media {
  id
  type
  width
  height
  urls {
    variant
    url
  }
  imageType
}
    `;
export const TaskBaseFragmentDoc = `
    fragment TaskBase on Task {
  id
  userId
  parameters
  outputs
  status
  startedAt
  endAt
  createdAt
  updatedAt
}
    `;
export const AllEventsFragmentDoc = `
    fragment AllEvents on Events {
  taskUpdated {
    ...TaskBase
  }
}
    `;
export const CreateGenerationTaskDocument = `
    mutation createGenerationTask($parameters: JSONObject!) {
  createGenerationTask(parameters: $parameters) {
    ...TaskBase
  }
}
    ${TaskBaseFragmentDoc}`;
export const CancelGenerationTaskDocument = `
    mutation cancelGenerationTask($id: ID!) {
  cancelGenerationTask(id: $id) {
    ...TaskBase
  }
}
    ${TaskBaseFragmentDoc}`;
export const UploadMediaDocument = `
    mutation uploadMedia($input: UploadMediaInput!) {
  uploadMedia(input: $input) {
    uploadUrl
    externalId
    mediaId
    media {
      ...MediaBase
    }
  }
}
    ${MediaBaseFragmentDoc}`;
export const GetTaskByIdDocument = `
    query getTaskById($id: ID!) {
  task(id: $id) {
    ...TaskBase
  }
}
    ${TaskBaseFragmentDoc}`;
export const GetMediaByIdDocument = `
    query getMediaById($id: String!) {
  media(id: $id) {
    ...MediaBase
  }
}
    ${MediaBaseFragmentDoc}`;
export const SubscribePersonalEventsDocument = `
    subscription subscribePersonalEvents {
  personalEvents {
    ...AllEvents
  }
}
    ${AllEventsFragmentDoc}
${TaskBaseFragmentDoc}`;
export function getSdk(requester) {
    return {
        createGenerationTask(variables, options) {
            return requester(CreateGenerationTaskDocument, variables, options);
        },
        cancelGenerationTask(variables, options) {
            return requester(CancelGenerationTaskDocument, variables, options);
        },
        uploadMedia(variables, options) {
            return requester(UploadMediaDocument, variables, options);
        },
        getTaskById(variables, options) {
            return requester(GetTaskByIdDocument, variables, options);
        },
        getMediaById(variables, options) {
            return requester(GetMediaByIdDocument, variables, options);
        },
        subscribePersonalEvents(variables, options) {
            return requester(SubscribePersonalEventsDocument, variables, options);
        }
    };
}
//# sourceMappingURL=graphql.js.map