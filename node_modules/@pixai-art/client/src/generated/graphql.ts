import { Observable } from 'rxjs'
export type Maybe<T> = T | undefined;
export type InputMaybe<T> = T | undefined | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** Time information represented in ISO8601 format string. */
  Date: { input: any; output: any; }
  /** Any forms of valid JSON value. */
  JSON: { input: any; output: any; }
  /** Similar with JSON but only accept object type. */
  JSONObject: { input: any; output: any; }
  /**
   * A scalar that represents an empty response.
   *
   * You can don't care about the response of a mutation.
   *
   * It is usually be returned as null value.
   */
  Void: { input: any; output: any; }
};

/** We provide some different variants of the image for different scenarios. */
export enum ImageVariant {
  /** The original image. */
  Public = 'PUBLIC',
  /** For gif images or videos. This will be a fixed image. */
  StillThumbnail = 'STILL_THUMBNAIL',
  /** Can be used to obtain images of a certain size within a certain dimension. */
  Thumbnail = 'THUMBNAIL'
}

/**
 * The storage provider for uploading media files.
 *
 * Now we only support S3 for external users.
 */
export enum MediaProvider {
  Cf = 'CF',
  S3 = 'S3'
}

/**
 * The available media types.
 *
 * Now we only support IMAGE for external users.
 */
export enum MediaType {
  Image = 'IMAGE',
  Video = 'VIDEO'
}

/** The input for uploading a media file. */
export type UploadMediaInput = {
  externalId?: InputMaybe<Scalars['String']['input']>;
  height?: InputMaybe<Scalars['Int']['input']>;
  /** The mime type of the file. e.g: image/jpeg, image/png. */
  imageType?: InputMaybe<Scalars['String']['input']>;
  isPrivate?: InputMaybe<Scalars['Boolean']['input']>;
  provider?: InputMaybe<MediaProvider>;
  type: MediaType;
  width?: InputMaybe<Scalars['Int']['input']>;
};

export type MediaBaseFragment = { __typename?: 'Media', id: string, type: MediaType, width?: number | undefined, height?: number | undefined, imageType?: string | undefined, urls?: Array<{ __typename?: 'ImageUrl', variant?: ImageVariant | undefined, url?: string | undefined }> | undefined };

export type TaskBaseFragment = { __typename?: 'Task', id: string, userId: string, parameters?: any | undefined, outputs?: any | undefined, status?: string | undefined, startedAt?: any | undefined, endAt?: any | undefined, createdAt: any, updatedAt: any };

export type CreateGenerationTaskMutationVariables = Exact<{
  parameters: Scalars['JSONObject']['input'];
}>;


export type CreateGenerationTaskMutation = { __typename?: 'Mutation', createGenerationTask?: { __typename?: 'Task', id: string, userId: string, parameters?: any | undefined, outputs?: any | undefined, status?: string | undefined, startedAt?: any | undefined, endAt?: any | undefined, createdAt: any, updatedAt: any } | undefined };

export type CancelGenerationTaskMutationVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type CancelGenerationTaskMutation = { __typename?: 'Mutation', cancelGenerationTask?: { __typename?: 'Task', id: string, userId: string, parameters?: any | undefined, outputs?: any | undefined, status?: string | undefined, startedAt?: any | undefined, endAt?: any | undefined, createdAt: any, updatedAt: any } | undefined };

export type UploadMediaMutationVariables = Exact<{
  input: UploadMediaInput;
}>;


export type UploadMediaMutation = { __typename?: 'Mutation', uploadMedia: { __typename?: 'UploadMediaRes', uploadUrl?: string | undefined, externalId?: string | undefined, mediaId?: string | undefined, media?: { __typename?: 'Media', id: string, type: MediaType, width?: number | undefined, height?: number | undefined, imageType?: string | undefined, urls?: Array<{ __typename?: 'ImageUrl', variant?: ImageVariant | undefined, url?: string | undefined }> | undefined } | undefined } };

export type GetTaskByIdQueryVariables = Exact<{
  id: Scalars['ID']['input'];
}>;


export type GetTaskByIdQuery = { __typename?: 'Query', task?: { __typename?: 'Task', id: string, userId: string, parameters?: any | undefined, outputs?: any | undefined, status?: string | undefined, startedAt?: any | undefined, endAt?: any | undefined, createdAt: any, updatedAt: any } | undefined };

export type GetMediaByIdQueryVariables = Exact<{
  id: Scalars['String']['input'];
}>;


export type GetMediaByIdQuery = { __typename?: 'Query', media?: { __typename?: 'Media', id: string, type: MediaType, width?: number | undefined, height?: number | undefined, imageType?: string | undefined, urls?: Array<{ __typename?: 'ImageUrl', variant?: ImageVariant | undefined, url?: string | undefined }> | undefined } | undefined };

export type AllEventsFragment = { __typename?: 'Events', taskUpdated?: { __typename?: 'Task', id: string, userId: string, parameters?: any | undefined, outputs?: any | undefined, status?: string | undefined, startedAt?: any | undefined, endAt?: any | undefined, createdAt: any, updatedAt: any } | undefined };

export type SubscribePersonalEventsSubscriptionVariables = Exact<{ [key: string]: never; }>;


export type SubscribePersonalEventsSubscription = { __typename?: 'Subscription', personalEvents?: { __typename?: 'Events', taskUpdated?: { __typename?: 'Task', id: string, userId: string, parameters?: any | undefined, outputs?: any | undefined, status?: string | undefined, startedAt?: any | undefined, endAt?: any | undefined, createdAt: any, updatedAt: any } | undefined } | undefined };

export const MediaBaseFragmentDoc = `
    fragment MediaBase on Media {
  id
  type
  width
  height
  urls {
    variant
    url
  }
  imageType
}
    `;
export const TaskBaseFragmentDoc = `
    fragment TaskBase on Task {
  id
  userId
  parameters
  outputs
  status
  startedAt
  endAt
  createdAt
  updatedAt
}
    `;
export const AllEventsFragmentDoc = `
    fragment AllEvents on Events {
  taskUpdated {
    ...TaskBase
  }
}
    `;
export const CreateGenerationTaskDocument = `
    mutation createGenerationTask($parameters: JSONObject!) {
  createGenerationTask(parameters: $parameters) {
    ...TaskBase
  }
}
    ${TaskBaseFragmentDoc}`;
export const CancelGenerationTaskDocument = `
    mutation cancelGenerationTask($id: ID!) {
  cancelGenerationTask(id: $id) {
    ...TaskBase
  }
}
    ${TaskBaseFragmentDoc}`;
export const UploadMediaDocument = `
    mutation uploadMedia($input: UploadMediaInput!) {
  uploadMedia(input: $input) {
    uploadUrl
    externalId
    mediaId
    media {
      ...MediaBase
    }
  }
}
    ${MediaBaseFragmentDoc}`;
export const GetTaskByIdDocument = `
    query getTaskById($id: ID!) {
  task(id: $id) {
    ...TaskBase
  }
}
    ${TaskBaseFragmentDoc}`;
export const GetMediaByIdDocument = `
    query getMediaById($id: String!) {
  media(id: $id) {
    ...MediaBase
  }
}
    ${MediaBaseFragmentDoc}`;
export const SubscribePersonalEventsDocument = `
    subscription subscribePersonalEvents {
  personalEvents {
    ...AllEvents
  }
}
    ${AllEventsFragmentDoc}
${TaskBaseFragmentDoc}`;
export type Requester<C = {}> = <R, V>(doc: string, vars?: V, options?: C) => Promise<R> | Observable<R>
export function getSdk<C>(requester: Requester<C>) {
  return {
    createGenerationTask(variables: CreateGenerationTaskMutationVariables, options?: C): Promise<CreateGenerationTaskMutation> {
      return requester<CreateGenerationTaskMutation, CreateGenerationTaskMutationVariables>(CreateGenerationTaskDocument, variables, options) as Promise<CreateGenerationTaskMutation>;
    },
    cancelGenerationTask(variables: CancelGenerationTaskMutationVariables, options?: C): Promise<CancelGenerationTaskMutation> {
      return requester<CancelGenerationTaskMutation, CancelGenerationTaskMutationVariables>(CancelGenerationTaskDocument, variables, options) as Promise<CancelGenerationTaskMutation>;
    },
    uploadMedia(variables: UploadMediaMutationVariables, options?: C): Promise<UploadMediaMutation> {
      return requester<UploadMediaMutation, UploadMediaMutationVariables>(UploadMediaDocument, variables, options) as Promise<UploadMediaMutation>;
    },
    getTaskById(variables: GetTaskByIdQueryVariables, options?: C): Promise<GetTaskByIdQuery> {
      return requester<GetTaskByIdQuery, GetTaskByIdQueryVariables>(GetTaskByIdDocument, variables, options) as Promise<GetTaskByIdQuery>;
    },
    getMediaById(variables: GetMediaByIdQueryVariables, options?: C): Promise<GetMediaByIdQuery> {
      return requester<GetMediaByIdQuery, GetMediaByIdQueryVariables>(GetMediaByIdDocument, variables, options) as Promise<GetMediaByIdQuery>;
    },
    subscribePersonalEvents(variables?: SubscribePersonalEventsSubscriptionVariables, options?: C): Observable<SubscribePersonalEventsSubscription> {
      return requester<SubscribePersonalEventsSubscription, SubscribePersonalEventsSubscriptionVariables>(SubscribePersonalEventsDocument, variables, options) as Observable<SubscribePersonalEventsSubscription>;
    }
  };
}
export type Sdk = ReturnType<typeof getSdk>;